/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((module) => {

eval("const BOARD_SIZE = 10;\n\nfunction Coordinate(x, y) {\n  function sameRow(other) {\n    return y === other.y;\n  }\n\n  function sameColumn(other) {\n    return x === other.x;\n  }\n\n  function equals(other) {\n    return sameRow(other) && sameColumn(other);\n  }\n\n  return { x, y, sameRow, sameColumn, equals };\n}\n\nfunction Ship(start, end) {\n  if (!start || !end) {\n    console.error(\"Invalid coordinates for Ship.\");\n    return null;\n  }\n\n  if (!start.sameRow(end) && !start.sameColumn(end)) {\n    console.error(\n      \"Invalid ship placement: Start and End coordinates are neither in the same row nor column.\"\n    );\n    return null;\n  }\n\n  const coordinates = [];\n\n  function makeCoords(start, end) {\n    const minX = Math.min(start.x, end.x);\n    const maxX = Math.max(start.x, end.x);\n    const minY = Math.min(start.y, end.y);\n    const maxY = Math.max(start.y, end.y);\n\n    for (let x = minX; x <= maxX; x++) {\n      for (let y = minY; y <= maxY; y++) {\n        coordinates.push(Coordinate(x, y));\n      }\n    }\n  }\n\n  makeCoords(start, end);\n\n  const length = coordinates.length;\n  const hits = [];\n\n  function hit(coordinate) {\n    // Check if the coordinate is part of the ship and hasn't been hit yet\n    const target = coordinates.find((coord) => coord.equals(coordinate));\n    const alreadyHit = hits.some((hit) => hit.equals(coordinate));\n\n    if (target && !alreadyHit) {\n      hits.push(target);\n    }\n  }\n\n  function isSunk() {\n    return hits.length >= length;\n  }\n\n  return { coordinates, hit, hits, isSunk };\n}\n\nfunction Gameboard() {\n  const size = BOARD_SIZE;\n  let ships = [];\n  let missedAttacks = [];\n\n  const reset = () => {\n    ships.length = 0;\n    missedAttacks.length = 0;\n  };\n\n  const isValidCoordinate = (coordinate) => {\n    const { x, y } = coordinate;\n    return x >= 0 && x < size && y >= 0 && y < size;\n  };\n\n  const isOccupied = (coordinate) => {\n    return getShipIfOccupied(coordinate) !== false;\n  };\n\n  const getShipIfOccupied = (coordinate) => {\n    const foundShip = ships.find((ship) =>\n      ship.coordinates.some((shipCoordinate) =>\n        shipCoordinate.equals(coordinate)\n      )\n    );\n    return foundShip || false;\n  };\n\n  const placeShip = (ship) => {\n    let canPlace = true;\n\n    ship.coordinates.forEach((coordinate) => {\n      if (!isValidPlacement(coordinate)) {\n        canPlace = false;\n      }\n    });\n\n    if (canPlace) {\n      ships.push(ship);\n      return true;\n    }\n\n    return false;\n  };\n\n  function isValidPlacement(target) {\n    return isValidCoordinate(target) && !isOccupied(target);\n  }\n\n  const receiveAttack = (target) => {\n    const alreadyAttacked =\n      missedAttacks.some((miss) => miss.equals(target)) ||\n      ships.some((ship) => ship.hits.some((hit) => hit.equals(target)));\n\n    if (alreadyAttacked) {\n      console.log(\"Already attacked this coordinate!\");\n      return;\n    }\n\n    const ship = getShipIfOccupied(target);\n    if (ship) {\n      ship.hit(target);\n      console.log(\"Hit!\");\n    } else {\n      missedAttacks.push(target);\n      console.log(\"Missed!\");\n    }\n  };\n\n  const getMissedAttacks = () => {\n    return missedAttacks;\n  };\n\n  const allShipsSunk = () => {\n    return ships.every((ship) => ship.isSunk());\n  };\n\n  const getStatus = () => {\n    if (allShipsSunk()) {\n      return \"lost\";\n    } else {\n      return \"playing\";\n    }\n  };\n\n  return {\n    placeShip,\n    receiveAttack,\n    allShipsSunk,\n    ships,\n    getMissedAttacks,\n    getShipIfOccupied,\n    size,\n    getStatus,\n    reset,\n    isValidCoordinate,\n  };\n}\n\nfunction Player(name, gameboard, isComputer = false) {\n  let moves = [];\n  let hitQueue = []; // Queue to store targets adjacent to the last hit\n  const reset = () => {\n    moves.length = 0;\n    hitQueue.length = 0;\n  };\n\n  const attack = (target) => {\n    logAttack(target);\n    gameboard.receiveAttack(target);\n    moves.push(target);\n\n    // If a ship is hit, enqueue adjacent coordinates to hitQueue\n    const ship = gameboard.getShipIfOccupied(target);\n    if (ship && !ship.isSunk()) {\n      enqueueAdjacentTargets(target);\n    }\n  };\n\n  const logAttack = (target) => {\n    const { x, y } = target;\n    console.log(`${name} attacked ${x}, ${y}`);\n  };\n\n  const enqueueAdjacentTargets = (coordinate) => {\n    const { x, y } = coordinate;\n    const potentialTargets = [\n      Coordinate(x + 1, y),\n      Coordinate(x - 1, y),\n      Coordinate(x, y + 1),\n      Coordinate(x, y - 1),\n    ];\n\n    potentialTargets.forEach((coord) => {\n      if (\n        gameboard.isValidCoordinate(coord) &&\n        !moves.some((move) => move.equals(coord)) &&\n        !hitQueue.some((move) => move.equals(coord))\n      ) {\n        hitQueue.push(coord);\n      }\n    });\n  };\n\n  const smarterMove = () => {\n    let target = null;\n    let x, y; // Declare x and y here\n    if (hitQueue.length > 0) {\n      // If there are targets in hitQueue, target them first\n      target = hitQueue.shift();\n    } else {\n      // Implement a checkerboard pattern\n      do {\n        x = Math.floor(Math.random() * BOARD_SIZE);\n        y = Math.floor(Math.random() * BOARD_SIZE);\n\n        // Checkerboard pattern: only attack cells where (x + y) % 2 == 0\n        target = Coordinate(x, y);\n      } while (\n        (moves.some((move) => move.equals(target)) || (x + y) % 2 !== 0) &&\n        hitQueue.length === 0\n      );\n    }\n\n    attack(target);\n  };\n\n  return { name, attack, isComputer, smarterMove, moves, reset };\n}\n\nfunction Game() {\n  let humanBoard = Gameboard();\n  let computerBoard = Gameboard();\n  let human = Player(\"Human\", computerBoard);\n  let computer = Player(\"Computer\", humanBoard, true);\n  let winner = null;\n\n  const step = (x, y) => {\n    const target = Coordinate(x, y);\n    human.attack(target);\n    let status = computerBoard.getStatus();\n    if (status === \"lost\") {\n      console.log(\"Human wins!\");\n      winner = \"Human\";\n      return true;\n    }\n\n    computer.smarterMove();\n    status = humanBoard.getStatus();\n    if (status === \"lost\") {\n      console.log(\"Computer wins!\");\n      winner = \"Computer\";\n      return true;\n    }\n    return false;\n  };\n\n  const restart = () => {\n    humanBoard.reset();\n    computerBoard.reset();\n    human.reset();\n    computer.reset();\n    winner = null;\n  };\n\n  const getWinner = () => {\n    console.log(winner);\n    return winner;\n  };\n\n  return {\n    step,\n    restart,\n    humanBoard,\n    computerBoard,\n    human,\n    computer,\n    getWinner,\n  };\n}\n\nmodule.exports.Coordinate = Coordinate;\nmodule.exports.Ship = Ship;\nmodule.exports.Gameboard = Gameboard;\nmodule.exports.Player = Player;\nmodule.exports.Game = Game;\n\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/render.js":
/*!***********************!*\
  !*** ./src/render.js ***!
  \***********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Game, Coordinate, Ship, Gameboard, isSunk } = __webpack_require__(/*! ./game */ \"./src/game.js\");\nconst BOARD_SIZE = 10;\n\n// Initialize DOM elements\nconst shipContainer = document.getElementById(\"ship-container\");\nconst humanBoardElement = document.getElementById(\"humanBoard\");\nconst computerBoardElement = document.getElementById(\"computerBoard\");\n\n// Initialize both boards\nrenderBoard(humanBoardElement);\nrenderBoard(computerBoardElement);\n\nfunction renderBoard(boardElement) {\n  for (let y = 0; y < BOARD_SIZE; y++) {\n    const row = document.createElement(\"tr\");\n    for (let x = 0; x < BOARD_SIZE; x++) {\n      const cell = document.createElement(\"td\");\n      cell.dataset.x = x;\n      cell.dataset.y = y;\n      row.appendChild(cell);\n    }\n    boardElement.appendChild(row);\n  }\n}\n\n// Handle drag events for human player ship placement\nlet draggedShip = null;\nlet isHorizontal = true; // Default orientation\n\nshipContainer.addEventListener(\"dragstart\", (event) => {\n  draggedShip = event.target;\n  event.dataTransfer.setData(\"text/plain\", draggedShip.id);\n});\n\nhumanBoardElement.addEventListener(\"dragover\", (event) => {\n  event.preventDefault(); // Allow drop\n  const cell = event.target;\n  if (cell.tagName === \"TD\") {\n    cell.classList.add(\"drop-target\");\n  }\n});\n\nhumanBoardElement.addEventListener(\"dragleave\", (event) => {\n  const cell = event.target;\n  if (cell.tagName === \"TD\") {\n    cell.classList.remove(\"drop-target\");\n  }\n});\n\nhumanBoardElement.addEventListener(\"drop\", (event) => {\n  event.preventDefault();\n  const cell = event.target;\n  if (cell.tagName === \"TD\" && draggedShip) {\n    const shipSize = parseInt(draggedShip.dataset.size);\n    const startX = parseInt(cell.dataset.x);\n    const startY = parseInt(cell.dataset.y);\n\n    if (canPlaceShip(startX, startY, shipSize, isHorizontal)) {\n      placeShipOnBoard(startX, startY, shipSize, isHorizontal);\n      draggedShip.remove(); // Remove ship from the container once placed\n    }\n\n    cell.classList.remove(\"drop-target\");\n  }\n});\n\nfunction canPlaceShip(startX, startY, size, isHorizontal) {\n  for (let i = 0; i < size; i++) {\n    const x = isHorizontal ? startX + i : startX;\n    const y = isHorizontal ? startY : startY + i;\n    if (x >= BOARD_SIZE || y >= BOARD_SIZE) return false; // Ship goes off the board\n    const cell = humanBoardElement.querySelector(\n      `td[data-x='${x}'][data-y='${y}']`\n    );\n    if (cell.classList.contains(\"ship\")) return false; // Already occupied\n  }\n  return true;\n}\n\nfunction placeShipOnBoard(startX, startY, size, isHorizontal) {\n  const coordinates = [];\n  for (let i = 0; i < size; i++) {\n    const x = isHorizontal ? startX + i : startX;\n    const y = isHorizontal ? startY : startY + i;\n    const cell = humanBoardElement.querySelector(\n      `td[data-x='${x}'][data-y='${y}']`\n    );\n    cell.classList.add(\"ship\"); // Mark cell as occupied\n    coordinates.push(Coordinate(x, y));\n  }\n\n  // Create a ship object and add it to the gameboard\n  const ship = Ship(coordinates[0], coordinates[coordinates.length - 1]);\n  if (ship) {\n    window.game.humanBoard.placeShip(ship);\n  }\n}\n\ndocument.addEventListener(\"keydown\", (event) => {\n  if (event.key === \"r\") {\n    isHorizontal = !isHorizontal; // Toggle orientation on 'r' key press\n  }\n});\n\nfunction randomCoordinate() {\n  return Coordinate(\n    Math.floor(Math.random() * BOARD_SIZE),\n    Math.floor(Math.random() * BOARD_SIZE)\n  );\n}\n\nfunction placeRandomComputerShips(gameboard) {\n  const sizes = [2, 3, 5];\n  const MAX_ATTEMPTS = 100;\n\n  sizes.forEach((size) => {\n    let attempts = 0;\n    let shipPlaced = false;\n\n    while (!shipPlaced && attempts < MAX_ATTEMPTS) {\n      const start = randomCoordinate();\n      const isHorizontal = Math.random() < 0.5; // Randomize orientation\n      const end = isHorizontal\n        ? Coordinate(start.x + size - 1, start.y)\n        : Coordinate(start.x, start.y + size - 1);\n\n      // Ensure the end coordinate is within bounds\n      if (end.x < BOARD_SIZE && end.y < BOARD_SIZE) {\n        const potentialShip = Ship(start, end);\n        if (potentialShip) {\n          let overlaps = potentialShip.coordinates.some((coordinate) =>\n            gameboard.getShipIfOccupied(coordinate)\n          );\n\n          if (!overlaps) {\n            gameboard.placeShip(potentialShip);\n            shipPlaced = true;\n          }\n        }\n      }\n\n      attempts++;\n    }\n\n    if (attempts === MAX_ATTEMPTS) {\n      console.error(\n        \"Failed to place ship after max attempts. Resetting board.\"\n      );\n      gameboard.reset();\n      placeRandomComputerShips(gameboard);\n    }\n  });\n}\n\nfunction beginGame() {\n  // Initialize the game\n  if (!window.game) {\n    window.game = Game();\n  }\n  // Place ships on the computer board\n  placeRandomComputerShips(window.game.computerBoard);\n\n  // Render both boards\n  renderGameboard(window.game.humanBoard, \"humanBoard\", true);\n  renderGameboard(window.game.computerBoard, \"computerBoard\", false);\n}\n\nfunction renderGameboard(gameboard, boardId, preserveShips = false) {\n  const boardElement = document.getElementById(boardId);\n  boardElement.innerHTML = \"\"; // Clear the board's HTML\n\n  for (let y = 0; y < BOARD_SIZE; y++) {\n    const row = document.createElement(\"tr\");\n    for (let x = 0; x < BOARD_SIZE; x++) {\n      const cell = document.createElement(\"td\");\n      const coord = Coordinate(x, y);\n\n      if (preserveShips && gameboard.getShipIfOccupied(coord)) {\n        cell.classList.add(\"ship\");\n      }\n      if (ship && ship.isSunk()) {\n        cell.classList.add(\"sunk\");\n      }\n      if (\n        gameboard.getShipIfOccupied(coord) &&\n        gameboard.getShipIfOccupied(coord).hits.some((hit) => hit.equals(coord))\n      ) {\n        cell.classList.add(\"hit\");\n      } else if (\n        gameboard.getMissedAttacks().some((miss) => miss.equals(coord))\n      ) {\n        cell.classList.add(\"miss\");\n      }\n      row.appendChild(cell);\n    }\n    boardElement.appendChild(row);\n  }\n}\n\nconst beginGameButton = document.getElementById(\"beginGameButton\");\nbeginGameButton.addEventListener(\"click\", beginGame);\n\ncomputerBoardElement.addEventListener(\"click\", (event) => {\n  if (event.target.tagName === \"TD\") {\n    const cell = event.target;\n    const rowIndex = Array.from(cell.parentNode.parentNode.children).indexOf(\n      cell.parentNode\n    );\n    const colIndex = Array.from(cell.parentNode.children).indexOf(cell);\n\n    // Handle the attack on the computer's board using rowIndex and colIndex.\n    const isWin = window.game.step(colIndex, rowIndex);\n    console.log(window.game.humanBoard);\n    renderGameboard(window.game.humanBoard, \"humanBoard\", true);\n    renderGameboard(window.game.computerBoard, \"computerBoard\", false);\n    console.log(`Attacking coordinate: (${colIndex}, ${rowIndex})`);\n\n    if (isWin) {\n      const winner = window.game.getWinner();\n      showVictoryMessage(winner);\n    }\n  }\n});\n\nfunction showVictoryMessage(winner) {\n  const victoryMessage = document.createElement(\"div\");\n  victoryMessage.textContent = `${winner} wins!`;\n  victoryMessage.classList.add(\"victory-message\");\n  document.body.appendChild(victoryMessage);\n\n  setTimeout(() => {\n    if (confirm(`${winner} wins! Would you like to play again?`)) {\n      window.game.restart();\n      renderGameboard(window.game.humanBoard, \"humanBoard\", true);\n      renderGameboard(window.game.computerBoard, \"computerBoard\", false);\n      document.body.removeChild(victoryMessage);\n    }\n  }, 100);\n}\n\nmodule.exports.renderBoard = renderBoard;\nmodule.exports.beginGame = beginGame;\nmodule.exports.renderGameboard = renderGameboard;\n\n\n//# sourceURL=webpack:///./src/render.js?");

/***/ }),

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Game } = __webpack_require__(/*! ./game */ \"./src/game.js\");\nconst { renderBoard } = __webpack_require__(/*! ./render */ \"./src/render.js\");\n\nconsole.log(\"script.js is running\");\nconst game = Game();\nwindow.game = game;\n\n// Render the boards\nrenderBoard(\"humanBoard\");\nrenderBoard(\"computerBoard\");\n\n\n//# sourceURL=webpack:///./src/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.js");
/******/ 	
/******/ })()
;